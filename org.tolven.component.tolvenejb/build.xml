<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="deploy-to-local-repository" name="org.tolven.component.tolvenejb">

	<import file="../plugin/buildImport.xml"/>

	<property name="buildFolder" value="build"/>
	<property name="includeSourceInDevLib" value="true"/>

	<property name="local.excludes" value="test/org/**,test/rules/**,**/InvitationSender.*,**/InvitationBean*,**/InvitationLocal.*,**/InvitationQueueBean*,**/InvitationQueueLocal.*,**/InvitationException.*,**/Invitation.*,**/InvitationType.*,**/ctom/**" />

	<target name="build-plugin" depends="jar" description="Build all sections of this plugin">
		<zip destfile="${zipFileName}">
			<!-- Add Manifest section -->
			<zipfileset dir="manifest"/>
		</zip>
		<!-- Each section adds itself to the zip file-->
		<!-- Add DevLib.jar to plugin zip -->
		<zip destfile="${zipFileName}" update="true">
			<zipfileset dir="${buildFolder}">
				<include name="devLib.jar"/>
			</zipfileset>
		</zip>
		<copy toDir="${buildFolder}/ejb/classes" preservelastmodified="true">
			<fileset dir="${buildFolder}/bin" includes="**/*.class" excludes="${local.excludes}" />
			<fileset dir="src" includes="**/*.properties" excludes="${local.excludes}" />
			<fileset dir="resources/" />
		</copy>
		<copy toDir="${buildFolder}/ejb/META-INF/" preservelastmodified="true">
			<fileset dir="conf" />
		</copy>
		<zip destfile="${zipFileName}" update="true">
			<fileset dir="${buildFolder}">
				<include name="ejb/**"/>
			</fileset>
		</zip>
	</target>
	<target  name="compile" depends="init" description="Compile Tolven EJB modules">
		<mkdir dir="build/bin"/>
		<javac destdir="build/bin" excludes="${local.excludes}" debug="true" encoding="UTF-8" >
			<src path="src" />
			<classpath refid="project.classpath"/>
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>
	<target name="jar" depends="compile" description="devLib.jar">
		<jar destfile="build/devLib.jar">
			<zipfileset dir="src" excludes="${local.excludes}" />
			<zipfileset dir="${buildFolder}/bin" excludes="${local.excludes}" />
		</jar>
	</target>

	<target name="javadoc" description="Generate Javadoc">
		<javadoc access="public" author="true" destdir="${respositoryLocal.location}/javadoc/${plugin(id)}-${plugin(version)}" doctitle="Tolven EJB" 
			overview="src/org/tolven/overview.html" 
			packagenames="*"
			classpathref="project.classpath" 
			source="1.6" sourcepath="src" splitindex="true" use="true" version="true"
		    encoding="UTF-8"  docencoding="UTF-8"/>
	</target>

	<target name="apijavadoc" description="Generate API Javadoc">
		<javadoc access="public" author="true" destdir="${buildFolder}/apidoc" doctitle="Tolven API" 
			overview="src/org/tolven/overview.html" 
			packagenames="org.tolven.core,org.tolven.app,org.tolven.doc,org.tolven.security,org.tolven.gen,org.tolven.mail,org.tolven.provider,org.tolven.trim.api,org.tolven.rules,org.tolven.trim,org.tolven.ccr"
			classpathref="project.classpath" 
			source="1.6" sourcepath="src" splitindex="true" use="true" version="true"
		    encoding="UTF-8"  docencoding="UTF-8"/>
	</target>

	<!-- Unless you are changing the XSD, this doesn't need to be run because the generated code is checked into CVS -->
	<target name="gen_userAccount" description="Generate userAccount java from XSD">
		<exec executable="xjc">
			<arg line="-p org.tolven.xml.userAccounts"/>
			<arg line="-d src"/>
			<arg line="-extension"/>
			<arg line="-no-header"/>
			<arg file="resources/xsd/userAccounts.xsd"/>
		</exec>
	</target>

	<!-- Unless you are changing the XSD, this doesn't need to be run because the generated code is checked into CVS -->
	<target name="gen_trim" description="Generate trim java from XSD">
		<exec executable="xjc">
			<arg line="-p org.tolven.trim"/>
			<arg line="-d src"/>
			<arg line="-extension"/>
			<arg line="-no-header"/>
			<arg file="resources/xsd/trim4.xsd"/>
		</exec>
	</target>
	<!-- Note: The CCR XSD is restricted by ASTM -->
	<target name="gen_ccr" description="Generate ccr java from XSD">
		<exec executable="xjc">
			<arg line="-p org.tolven.ccr"/>
			<arg line="-d srcx"/>
			<arg line="-extension"/>
			<arg line="-no-header"/>
			<arg file="${ccrXSD.location}"/>
		</exec>
	</target>
	<!-- Unless you are changing the XSD, this doesn't need to be run because the generated code is checked into CVS -->
	<target name="gen_menuStructure" description="Generate menustructure classes from XSD">
		<exec executable="xjc">
			<arg line="-p org.tolven.menuStructure"/>
			<arg line="-d src"/>
			<arg line="-extension"/>
			<arg line="-no-header"/>
			<arg file="resources/xsd/menuStructure.xsd"/>
		</exec>
	</target>
	<!-- ant targets for running unit tests-->

	<target name="run-unit-tests" depends="build-plugin" description="Run the example Main program">
		<javac destdir="build/bin" includes="test/org/**,test/rules/**" debug="true" encoding="UTF-8" >
			<src path="src" />
			<classpath refid="project.classpath"/>
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<mkdir dir="build/testreports"/>
		<junit fork="yes" haltonfailure="no" showoutput="yes">
			<classpath  refid="project.classpath" />
			<classpath location="build/bin"/>
			<batchtest fork="yes" todir="build/testreports">
				<fileset dir="src">
					<include name="test/**/*Test.java"/>
					<exclude name="**/ListDataBeanTest.java"/>
					<exclude name="**/MenuBeanTest.java"/>
				</fileset>
				<formatter type="plain"/>
			</batchtest>
		</junit>
	</target>

	<path id="classpath-openjpa" description="The classpath to use for compiling and running">
		<pathelement path="build/bin" />
		<fileset dir="${basedir}/lib">
			<include name="slf4j-api-*.jar" />
			<include name="slf4j-simple-*.jar" />
			<include name="shiro-core-*.jar" />
			<include name="openjpa-all-*.jar" />
			<include name="postgresql-*.jdbc4.jar" />
		</fileset>
		<fileset dir="${tolvenConfig.location}/devLib">
			<include name="*.jar" />
			<exclude name="org.tolven.component.tolvenejb.devLib.jar"/>
		</fileset>
	</path>

	<path id="javaagent">
		<fileset dir="${basedir}/lib">
			<include name="openjpa-*.jar" />
			<exclude name="openjpa-all-*.jar" />
		</fileset>
	</path>
	<pathconvert property="javaagent" refid="javaagent" />
	<target name="run-jpa-unit-tests" depends="build-plugin" description="Run the example Main program">
		<copy todir="build/bin/META-INF">
			<fileset dir="testResources/META-INF" />
		</copy>
		<javac destdir="build/bin" includes="test/org/**,test/rules/**" debug="true" encoding="UTF-8" >
			<src path="src" />
			<classpath refid="project.classpath"/>
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<junit fork="yes" haltonfailure="yes">
			<test name="test.org.tolven.app.MenuBeanTest" />
			<formatter type="plain" usefile="false" />
			<classpath  refid="classpath-openjpa" />
			<classpath>
				<pathelement location="build/bin"/>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<jvmarg value="-javaagent:${javaagent}" />
			<jvmarg value="-Xdebug -Xrunjdwp:transport=dt_socket,server=n,suspend=y,address=1077" />

			<!-- Tell OpenJPA to automatically create tables in the databasefor entities. 
						Note that this should be disabled when running against a production database, 
						since you probably don't want to be altering the schema at runtime. -->
			<!--sysproperty key="openjpa.jdbc.SynchronizeMappings"
							value="buildSchema" /-->

			<!-- Output all SQL and set the general logging level to show warnings. 
							Turn off SQL trace for production. -->
			<!--sysproperty key="openjpa.Log" value="DefaultLevel=INFO,SQL=TRACE" /-->
			<sysproperty key="openjpa.Log" value="DefaultLevel=INFO"/>

		</junit>
	</target>

</project>
